- route:
    id: TicketAgent
    from:
      id: Mail Fetch
      uri: imaps://imap.gmail.com:993
      parameters:
        delay: "20000"
        maxMessagesPerPoll: 1
        password: wueexvyjkhenvvyb
        unseen: "true"
        username: theparttimewriters@gmail.com
      steps:
        - log:
            id: LogMailStatus
            message: Processing mail...
        - setProperty:
            id: setHeaderMailFrom
            expression:
              simple:
                expression: ${header.From}
            name: mailFrom
        - to:
            id: call-llm-api
            uri: direct:call-llm-api
            parameters: {}
        - script:
            id: ProcessMailScript
            expression:
              groovy:
                expression: >-
                  import java.net.URLEncoder

                  def payload = exchange.getProperty('analysis')


                  def fromHeader = exchange.getProperty('mailFrom')?.toString()


                  println "Processing From: " + fromHeader


                  def (name, email) = (fromHeader =~ /(.*?)\s*<([^>]+)>/).with
                  { 
                    it.find() ? [it[0][1].trim(), it[0][2]] : [null, null] 
                  }


                  println "Name: " + name 

                  println "Email: " + email


                  def subject = exchange.in.headers['Subject'] ?: 'No Subject';


                  exchange.setProperty("ticketId", payload['ticketId'] ?: "")

                  exchange.setProperty("customerName", payload['name'] ?: name)

                  exchange.setProperty("customerEmail", email)

                  def rawMessageText = payload['text'] != null ? payload['text'].toString() : ""

                  exchange.setProperty("messageText", URLEncoder.encode(rawMessageText, 'UTF-8'))

                  exchange.setProperty("subject", subject)

                  exchange.setProperty("timestamp", System.currentTimeMillis())

                  exchange.setProperty("intent", payload['intent'])

                  exchange.setProperty("mood", payload['mood'])

                  exchange.setProperty("urgency", payload['urgency'])

                  exchange.setProperty("severity", payload['severity'])
        - log:
            id: LogAnalysisStatus
            message: |-
              Analysis done. 
               Name ${exchangeProperty.customerName} 
               Email ${exchangeProperty.customerEmail} 
               Message ${exchangeProperty.messageText} 
               Subject ${exchangeProperty.subject} 
               Intent ${exchangeProperty.intent} 
               Mood ${exchangeProperty.mood} 
               Urgency ${exchangeProperty.urgency} 
               Severity ${exchangeProperty.severity}
        - filter:
            id: FilterBody
            steps:
              - log:
                  id: LogCheckCache
                  message: Checking if ticket is active...
              - setHeader:
                  id: setHeader-cache-action
                  constant: GET
                  name: CamelCaffeineAction
              - setHeader:
                  id: setHeader-cache-key
                  expression:
                    simple:
                      expression: ${exchangeProperty.customerEmail}
                  name: CamelCaffeineKey
              - to:
                  id: to-caffeine-cache
                  uri: caffeine-cache://activeTickets
              - choice:
                  id: IsTicketActive
                  otherwise:
                    id: otherwise
                    steps:
                      - log:
                          id: log-1125
                          message: No active ticket found for customer ${exchangeProperty.customerName},
                            will create new ticket
                      - to:
                          id: create-trello-ticket
                          uri: direct:create-trello-ticket
                          parameters: {}
                  when:
                    - id: when
                      steps:
                        - setProperty:
                            id: setHeader
                            expression:
                              simple:
                                expression: ${body}
                            name: activeTicketId
                        - log:
                            id: log-1239
                            message: Found active ticket ${exchangeProperty.activeTicketId} for customer
                              ${exchangeProperty.customerEmail}
                        - to:
                            id: add-comment
                            uri: direct:add-comment-to-ticket
                            parameters: {}
                      expression:
                        simple:
                          expression: ${header.CamelCaffeineActionHasResult} == true
            expression:
              simple:
                expression: ${body} != null
- route:
    id: CallAI
    from:
      id: from-2300
      uri: direct:call-llm-api
      parameters: {}
      steps:
        - log:
            id: log-llm
            message: Analysing Message using AI
        - removeHeaders:
            id: RemoveHttpHeaders-1
            pattern: CamelHttp*
        - setHeader:
            constant: application/json
            name: Content-Type
        - setHeader:
            constant: Bearer {{LLM_API_KEY}}
            name: Authorization
        - setProperty:
            id: API Data
            expression:
              simple:
                expression: |-
                  Analyze Email:
                    Extract the following:

                    intent: Customer's request

                    mood: Emotional tone (e.g., angry, confused)

                    urgency: Low / Medium / High

                    severity: Low / Medium / High

                    Rules:

                    Ignore \"Thanks\", \"Regards\", etc.

                    Use '' for missing fields

                    sample Output format:
                    {
                      \"ticketId\": \"1023\",
                      \"text\": \"Some email message body\",
                      \"name\": \"customerName\",                      
                      \"intent\": \"\",
                      \"mood\": \"\",
                      \"urgency\": \"\",
                      \"severity\": \"\"
                    }

                  Here is the Email:                  
                  Subject: ${header.Subject} 
                  Body: ${body}
            name: apiData
        - setBody:
            id: SetLLMBody
            expression:
              simple:
                expression: >-
                  {
                    "model": "qwen/qwen3-1.7b:free",
                    "messages": [ { "role": "user", "content": "${exchangeProperty.apiData}" } ]
                  }
        - doTry:
            id: Try
            steps:
              - to:
                  id: llm_api_call
                  uri: https://openrouter.ai/api/v1/chat/completions
                  parameters:
                    bridgeErrorHandler: "true"
                    copyHeaders: "false"
                    httpMethod: POST
              - unmarshal:
                  id: unmarshal
                  json: {}
              - setBody:
                  id: set api content
                  expression:
                    simple: ${body[choices][0][message][content]}
              - unmarshal:
                  id: unmarshal
                  json: {}
              - setProperty:
                  expression:
                    simple: ${body}
                  name: analysis
            doCatch:
              - steps:
                  - log:
                      id: CatchLog
                      message: "Error calling API: ${exception.message}"
                  - setProperty:
                      id: default analysis
                      expression:
                        groovy: |-
                          [
                            ticketId: "",
                            text: "",
                            intent: "Cannot determine - API error",
                            mood: "unknown", 
                            urgency: "Medium",
                            severity: "Medium"                            
                          ]
                      name: analysis
                exception: java.lang.Exception
- route:
    id: CreateTrelloTicket
    from:
      id: create Trello ticket
      uri: direct:create-trello-ticket
      parameters: {}
      steps:
        - removeHeader:
            id: RemoveAuthorization
            name: Authorization
        - removeHeaders:
            id: RemoveHttpHeaders-2
            pattern: CamelHttp*
        - removeHeader:
            id: remove use agent trello
            name: User-Agent
        - setHeader:
            id: Set Content - Type
            constant: application/json
            name: Content-Type
        - setHeader:
            expression:
              simple: name=${exchangeProperty.customerName}%20${exchangeProperty.customerEmail}&desc=${exchangeProperty.messageText}&idList=68148cc61f43f14863948ee7&key={{TRELLO_API_KEY}}&token={{TRELLO_API_KEY}}
            name: CamelHttpQuery
        - log:
            id: log create tickets
            message: Creating Trello ticket for customer ${exchangeProperty.customerName}
        - setBody:
            id: Reset Body
            expression:
              simple: ${null}
        - doTry:
            id: Try trello api
            steps:
              - to:
                  id: Create Ticket Api
                  uri: https://api.trello.com/1/cards
                  parameters:
                    copyHeaders: "false"
                    httpMethod: POST
              - unmarshal:
                  id: unmarshal Trello res
                  json: {}
              - setProperty:
                  name: cardId
                  simple: ${body['id']}
              - log:
                  id: Log Create Status
                  message: Ticket created successfully
              - setHeader:
                  constant: PUT
                  name: CamelCaffeineAction
              - setHeader:
                  name: CamelCaffeineKey
                  simple: ${exchangeProperty.customerEmail}
              - setHeader:
                  name: CamelCaffeineValue
                  simple: ${exchangeProperty.cardId}
              - to:
                  id: Set Ticket Cache
                  uri: caffeine-cache://activeTickets
                  parameters: {}
            doCatch:
              - steps:
                  - log:
                      id: catch api log
                      message: "Error creating Trello ticket: ${exception.message}"
                  - setBody:
                      id: set default body
                      expression:
                        constant: '{"status":"error","message":"Failed to create Trello ticket"}'
                exception: java.lang.Exception
        - removeHeaders:
            id: RemoveHttpHeaders-4
            pattern: CamelHttp*
        - removeHeader:
            id: Reset Query - 2
            name: CamelHttpQuery
        - setHeader:
            constant: application/json
            name: Content-Type
        - setBody:
            id: Reset Body - 2
            expression:
              simple: ${null}
        - setHeader:
            expression:
              simple: color=blue&name=Urgency:%20${exchangeProperty.urgency}&key={{TRELLO_API_KEY}}&token={{TRELLO_API_TOKEN}}
            name: CamelHttpQuery
        - toD:
            id: Create Label on Ticket - 1
            uri: https://api.trello.com/1/cards/${exchangeProperty.cardId}/labels
            parameters:
              copyHeaders: "false"
              httpMethod: POST
        - removeHeaders:
            id: RemoveHttpHeaders-5
            pattern: CamelHttp*
        - setHeader:
            constant: application/json
            name: Content-Type
        - setBody:
            id: Reset Body - 3
            expression:
              simple: ${null}
        - setHeader:
            expression:
              simple: color=red&name=Severity:%20${exchangeProperty.severity}&key={{TRELLO_API_KEY}}&token={{TRELLO_API_TOKEN}}
            name: CamelHttpQuery
        - toD:
            id: Create Label on Ticket - 2
            uri: https://api.trello.com/1/cards/${exchangeProperty.cardId}/labels
            parameters:
              copyHeaders: "false"
              httpMethod: POST
        - removeHeader:
            id: Reset Query - 4
            name: CamelHttpQuery
        - setBody:
            id: Reset Body - 4
            expression:
              simple: ${null}
        - setHeader:
            constant: application/json
            name: Content-Type
        - setHeader:
            expression:
              simple: color=pink&name=Intent:%20${header.intent}&key={{TRELLO_API_KEY}}&token={{TRELLO_API_TOKEN}}
            name: CamelHttpQuery
        - toD:
            id: Create Label on Ticket - 3
            uri: https://api.trello.com/1/cards/${header.cardId}/labels
            parameters:
              copyHeaders: "false"
              httpMethod: POST
- route:
    id: AddCommentToTicket
    from:
      id: Add-comment-to-ticket
      uri: direct:add-comment-to-ticket
      parameters: {}
      steps:
        - setBody:
            simple: |-
              Follow-up message from customer:

              ${header.messageText}
        - removeHeaders:
            id: RemoveHttpHeaders-3
            pattern: CamelHttp*
        - removeHeader:
            id: RemoveUserAgent-3
            name: User-Agent
        - setHeader:
            expression:
              simple: text=${header.messageText}&key=c0381c1417ef32cc9b86147f5684e0c6&token=ATTAb182187d32e022b488bdc5d3f69381fcbec2452a8dbaf88fdd033ec205eabd1a2FB43A05
            name: CamelHttpQuery
        - setHeader:
            name: TrelloCardId
            simple: ${header.activeTicketId}
        - doTry:
            steps:
              - toD:
                  uri: https://api.trello.com/1/cards/${header.activeTicketId}/actions/comments
                  parameters:
                    bridgeEndpoint: "true"
                    followRedirects: "true"
                    httpMethod: POST
                    useSystemProperties: "false"
            doCatch:
              - steps:
                  - log:
                      message: "Error adding comment to ticket: ${exception.message}"
                  - setBody:
                      expression:
                        constant: '{"status":"error","message":"Failed to create Trello ticket"}'
                exception: java.lang.Exception
        - log: Added comment to ticket ${header.activeTicketId} for customer
            ${header.customerEmail}
