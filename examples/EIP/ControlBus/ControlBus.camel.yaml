- route:
    id: HttpControlInterface
    from:
      id: HttpControl
      uri: platform-http:/admin/control
      parameters:
        httpMethodRestrict: POST
      steps:
        - log:
            id: Log Http Body
            message: "Control request received: ${body}"
        - unmarshal:
            id: Unmarshal Http Body
            json: {}
        - setHeader:
            id: Set Control Action
            name: action
            expression:
              simple: 
                expression: ${body[action]}
        - setHeader:
            id: Set Control RouteId
            name: routeId
            expression:
              simple: 
                expression: ${body[routeId]}
        - setHeader:
            id: Set Component
            name: component
            expression:
              simple: 
                expression: ${body[component]}
        - to:
            id: DirectControlManager
            uri: direct:processControlCommand
        - setBody:
            id: SetControlManagerBody
            expression:
              simple: "{\"status\": \"success\", \"message\": \"Command ${header.action} executed for ${header.routeId == null ? 'all' : header.routeId}\", \"timestamp\": \"${date:now:yyyy-MM-dd HH:mm:ss}\"}"

- route:
    id: OrderIngestionRoute
    description: Ingests orders from multiple sources (files, HTTP). Can be
      controlled via Control Bus.
    autoStartup: false
    from:
      id: Read Incoming
      uri: file
      parameters:
        delay: 10000
        directoryName: orders/incoming
        initialDelay: 2000
        move: orders/processed
        moveFailed: orders/failed
        noop: false
      steps:
        - log:
            id: Log Incoming
            message: "Order ingestion processing file: ${header.CamelFileName}"
        - unmarshal:
            id: Unmarshal Incoming
            json: {}
        - setHeader:
            id: Set Incoming OrderId
            name: orderId
            expression:
              simple: 
                expression: ${body[orderId]}
        - setHeader:
            id: Set Incoming Status
            expression:
              constant: 
                expression: RECEIVED
            name: orderStatus
        - to:
            id: Validate Order
            uri: direct:validateOrder

- route:
    id: OrderValidationRoute
    description: Validates incoming orders. Can be enabled/disabled for maintenance.
    autoStartup: false
    from:
      id: Route Validate Order
      uri: direct:validateOrder
      steps:
        - log:
            id: Log Validate Order
            message: "Validating order: ${header.orderId}"
        - script:
            id: Validation Script
            expression:
              groovy:
                expression: >
                  def order = request.body;

                  def isValid = order.customerId && order.items &&
                  !order.items.isEmpty() && order.totalAmount > 0;

                  request.headers.orderValid = isValid;

                  if (!isValid) {
                    request.headers.validationError = "Missing required fields: customerId, items, or totalAmount";
                  }
        - choice:
            id: Choice Validation
            otherwise:
              id: InValid Order
              steps:
                - log:
                    id: Log InValid Order
                    message: "Order ${header.orderId} validation failed: ${header.validationError}"
                - to:
                    id: Direct InValid Order
                    uri: direct:handleInvalidOrder
            when:
              - id: Valid Order
                steps:
                  - log:
                      id: Log Valid Order
                      message: Order ${header.orderId} is valid, proceeding to inventory check
                  - to:
                      id: CheckInventory
                      uri: direct:checkInventory
                expression:
                  simple: ${header.orderValid} == true
- route:
    id: InventoryCheckRoute
    description: Checks inventory availability. Can be paused during inventory updates.
    autoStartup: false
    from:
      id: Check Inventory
      uri: direct:checkInventory
      steps:
        - log:
            id: Log Check Inventory
            message: "Checking inventory for order: ${header.orderId}"
        - script:
            id: Check Inventory Script
            expression:
              groovy:
                expression: >
                  log.info("Inventory Check Routee...")

                  def order = exchange.in.body;

                  def allItemsAvailable = true;

                  def unavailableItems = [];


                  // Simulate inventory check

                  order.items.each { item ->
                    // Simulate random availability (80% chance available)
                    if (Math.random() < 0.2) {
                      allItemsAvailable = false;
                      unavailableItems.add(item.productId);
                    }
                  }


                  exchange.in.setHeader('inventoryAvailable',
                  allItemsAvailable);

                  exchange.in.setHeader('unavailableItems',
                  unavailableItems.join(", "));
        - choice:
            id: Inventory Validation
            otherwise:
              id: Inventory Not Available
              steps:
                - log:
                    id: Log Not Available
                    message: "Inventory unavailable for order: ${header.orderId}. Items:
                      ${header.unavailableItems}"
                - setHeader:
                    id: Set Inventory Status Header
                    constant: INVENTORY_UNAVAILABLE
                    name: orderStatus
                - to:
                    id: Handle Inventory Unavailable
                    uri: direct:handleInventoryUnavailable
            when:
              - id: Inventory Available
                steps:
                  - log:
                      id: Log Inventory Available
                      message: "Inventory available for order: ${header.orderId}"
                  - setHeader:
                      id: Set Inventory Present Header
                      constant: INVENTORY_CONFIRMED
                      name: orderStatus
                  - to:
                      id: Process Payment
                      uri: direct:processPayment
                simple: ${header.inventoryAvailable} == true
- route:
    id: PaymentProcessingRoute
    description: Processes payments. Can be stopped during payment gateway maintenance.
    autoStartup: false
    from:
      id: Process Payment
      uri: direct:processPayment
      steps:
        - log:
            id: Log Process Payment
            message: "Processing payment for order: ${header.orderId}"
        - script:
            id: Payment Processing Script
            expression:
              groovy:
                expression: >
                  // Simulate payment processing (90% success rate)

                  def paymentSuccess = Math.random() < 0.9;


                  exchange.in.setHeader('paymentSuccess', paymentSuccess);

                  exchange.in.setHeader('transactionId', "TXN-" + new
                  Random().nextInt(1000000) );
        - choice:
            id: Payment Choice
            otherwise:
              id: Payment Failed
              steps:
                - log:
                    id: Log Payment Failed
                    message: "Payment failed for order: ${header.orderId}"
                - setHeader:
                    id: Set Payment Failed Status
                    constant: PAYMENT_FAILED
                    name: orderStatus
                - to:
                    id: Handle Payment Failure
                    uri: direct:handlePaymentFailure
            when:
              - id: Payment Successful
                steps:
                  - log:
                      id: Log Payment Successful
                      message: "Payment successful for order: ${header.orderId}, Transaction:
                        ${header.transactionId}"
                  - setHeader:
                      id: Set Payment Confirmed Status
                      constant: PAYMENT_CONFIRMED
                      name: orderStatus
                  - to:
                      id: Fulfill Order
                      uri: direct:fulfillOrder
                simple: ${header.paymentSuccess} == true
- route:
    id: OrderFulfillmentRoute
    description: Handles order fulfillment and shipping. Can be controlled during
      warehouse operations.
    autoStartup: false
    from:
      id: Fulfill Order
      uri: direct:fulfillOrder
      steps:
        - log:
            id: Log Fulfill Order
            message: "Fulfilling order: ${header.orderId}"
        - script:
            id: Fulfillment Script
            expression:
              groovy:
                expression: >
                  import java.time.ZonedDateTime;

                  import java.time.format.DateTimeFormatter;


                  request.headers.trackingNumber = "TRACK-" + new
                  Random().nextInt(1000000);

                  def estimatedDelivery = ZonedDateTime.now().plusDays(3);

                  request.headers.estimatedDelivery =
                  estimatedDelivery.format(DateTimeFormatter.ISO_INSTANT);
        - setHeader:
            id: Set Shipped Status
            constant: SHIPPED
            name: orderStatus
        - log:
            id: Log Order Shipped
            message: "Order ${header.orderId} shipped with tracking:
              ${header.trackingNumber}"
        - to:
            id: Send Notification
            uri: direct:sendNotification
- route:
    id: NotificationRoute
    description: Sends customer notifications. Can be disabled during maintenance.
    autoStartup: false
    from:
      id: Send Notification Route
      uri: direct:sendNotification
      steps:
        - log:
            id: Log Send Notification
            message: "Sending notification for order: ${header.orderId}, Status:
              ${header.orderStatus}"
        - script:
            id: Notification Script
            expression:
              groovy:
                expression: >
                  def inBody = exchange.in.body

                  def inHeaders = exchange.in.headers


                  def notification = [
                    orderId:           inHeaders.orderId,
                    customerId:        inBody.customerId,
                    status:            inHeaders.orderStatus,
                    message:           "Your order ${inHeaders.orderId} has been ${inHeaders.orderStatus.toLowerCase()}",
                    trackingNumber:    inHeaders.trackingNumber,
                    estimatedDelivery: inHeaders.estimatedDelivery
                  ]


                  exchange.in.body = notification
        - marshal:
            id: Marshal Notification
            json: {}
        - to:
            id: Write Notification File
            uri: file:notifications/outgoing
            parameters:
              fileName: notification-${header.orderId}-${date:now:yyyyMMdd-HHmmss}.json
- route:
    id: HandleInvalidOrderRoute
    from:
      uri: direct:handleInvalidOrder
      steps:
        - log:
            id: Log Invalid Order
            message: "Handling invalid order: ${header.orderId}"
        - marshal:
            json: {}
        - to:
            uri: file:orders/invalid
            parameters:
              fileName: invalid-${header.orderId}-${date:now:yyyyMMdd-HHmmss}.json
- route:
    id: HandleInventoryUnavailableRoute
    from:
      uri: direct:handleInventoryUnavailable
      steps:
        - log:
            message: "Handling inventory unavailable for order: ${header.orderId}"
        - marshal:
            json: {}
        - to:
            uri: file:orders/backorder
            parameters:
              fileName: backorder-${header.orderId}-${date:now:yyyyMMdd-HHmmss}.json
- route:
    id: HandlePaymentFailureRoute
    from:
      uri: direct:handlePaymentFailure
      steps:
        - log:
            message: "Handling payment failure for order: ${header.orderId}"
        - marshal:
            json: {}
        - to:
            uri: file:orders/payment-failed
            parameters:
              fileName: payment-failed-${header.orderId}-${date:now:yyyyMMdd-HHmmss}.json

- route:
    id: ControlBusManager
    from:
      id: Process Control Command
      uri: direct:processControlCommand
      steps:
        - log:
            id: Log Control Command
            message: "Processing control command - Action: ${header.action}, Route:
              ${header.routeId == null ? ''all'' : header.routeId}"
        - choice:
            id: Control Command Choice
            otherwise:
              id: Unknown Command
              steps:
                - log:
                    id: Log Unknown Command
                    message: "Unknown control command: ${header.action}. Valid commands: start,
                      stop, start-pipeline, stop-pipeline, maintenance-mode,
                      resume-from-maintenance, status"
            when:
              - id: Start Route Command
                steps:
                  - log:
                      id: Log Start Route
                      message: "Starting route: ${header.routeId}"
                  - toD:
                      id: Control Bus Start Route
                      uri: controlbus:route
                      parameters:
                        action: start
                        routeId: ${header.routeId}
                simple: ${header.action} == 'start' && ${header.routeId} != null
              - id: Stop Route Command
                steps:
                  - log:
                      id: Log Stop Route
                      message: "Stopping route: ${header.routeId}"
                  - toD:
                      id: Control Bus Stop Route
                      uri: controlbus:route
                      parameters:
                        action: stop
                        routeId: ${header.routeId}
                simple: ${header.action} == 'stop' && ${header.routeId} != null
              - id: Start Pipeline Command
                steps:
                  - log:
                      id: Log Start Pipeline
                      message: Starting entire order processing pipeline
                  - to:
                      id: Control Bus Start Order Ingestion
                      uri: controlbus:route
                      parameters:
                        action: start
                        routeId: OrderIngestionRoute
                  - to:
                      id: Control Bus Start Order Validation
                      uri: controlbus:route
                      parameters:
                        action: start
                        routeId: OrderValidationRoute
                  - to:
                      id: Control Bus Start Inventory Check
                      uri: controlbus:route
                      parameters:
                        action: start
                        routeId: InventoryCheckRoute
                  - to:
                      id: Control Bus Start Payment Processing
                      uri: controlbus:route
                      parameters:
                        action: start
                        routeId: PaymentProcessingRoute
                  - to:
                      id: Control Bus Start Order Fulfillment
                      uri: controlbus:route
                      parameters:
                        action: start
                        routeId: OrderFulfillmentRoute
                  - to:
                      id: Control Bus Start Notification
                      uri: controlbus:route
                      parameters:
                        action: start
                        routeId: NotificationRoute
                simple: ${header.action} == 'start-pipeline'
              - id: Stop Pipeline Command
                steps:
                  - log:
                      id: Log Stop Pipeline
                      message: Stopping entire order processing pipeline
                  - to:
                      id: Control Bus Stop Order Ingestion
                      uri: controlbus:route
                      parameters:
                        action: stop
                        routeId: OrderIngestionRoute
                  - to:
                      id: Control Bus Stop Order Validation
                      uri: controlbus:route
                      parameters:
                        action: stop
                        routeId: OrderValidationRoute
                  - to:
                      id: Control Bus Stop Inventory Check
                      uri: controlbus:route
                      parameters:
                        action: stop
                        routeId: InventoryCheckRoute
                  - to:
                      id: Control Bus Stop Payment Processing
                      uri: controlbus:route
                      parameters:
                        action: stop
                        routeId: PaymentProcessingRoute
                  - to:
                      id: Control Bus Stop Order Fulfillment
                      uri: controlbus:route
                      parameters:
                        action: stop
                        routeId: OrderFulfillmentRoute
                  - to:
                      id: Control Bus Stop Notification
                      uri: controlbus:route
                      parameters:
                        action: stop
                        routeId: NotificationRoute
                simple: ${header.action} == 'stop-pipeline'
              - id: Maintenance Mode Command
                steps:
                  - log:
                      id: Log Maintenance Mode
                      message: Entering maintenance mode - stopping processing routes
                  - to:
                      id: Control Bus Stop Payment For Maintenance
                      uri: controlbus:route
                      parameters:
                        action: stop
                        routeId: PaymentProcessingRoute
                  - to:
                      id: Control Bus Stop Inventory For Maintenance
                      uri: controlbus:route
                      parameters:
                        action: stop
                        routeId: InventoryCheckRoute
                  - to:
                      id: Control Bus Stop Fulfillment For Maintenance
                      uri: controlbus:route
                      parameters:
                        action: stop
                        routeId: OrderFulfillmentRoute
                simple: ${header.action} == 'maintenance-mode'
              - id: Resume From Maintenance Command
                steps:
                  - log:
                      id: Log Resume From Maintenance
                      message: Resuming from maintenance mode
                  - to:
                      id: Control Bus Resume Payment From Maintenance
                      uri: controlbus:route
                      parameters:
                        action: start
                        routeId: PaymentProcessingRoute
                  - to:
                      id: Control Bus Resume Inventory From Maintenance
                      uri: controlbus:route
                      parameters:
                        action: start
                        routeId: InventoryCheckRoute
                  - to:
                      id: Control Bus Resume Fulfillment From Maintenance
                      uri: controlbus:route
                      parameters:
                        action: start
                        routeId: OrderFulfillmentRoute
                simple: ${header.action} == 'resume-from-maintenance'
              - id: Status Command
                steps:
                  - log:
                      id: Log Get Status
                      message: "Getting status for route: ${header.routeId}"
                  - to:
                      id: Control Bus Get Status
                      uri: controlbus:route
                      parameters:
                        action: status
                        routeId: ${header.routeId}
                simple: ${header.action} == 'status'
- route:
    id: HealthCheckRoute
    from:
      uri: platform-http:/admin/health
      parameters:
        httpMethodRestrict: GET
      steps:
        - script:
            expression:
              groovy:
                expression: >
                  // Define the list of routes to check

                  def routesToCheck = [
                    'OrderIngestionRoute',
                    'OrderValidationRoute',
                    'InventoryCheckRoute',
                    'PaymentProcessingRoute',
                    'OrderFulfillmentRoute',
                    'NotificationRoute'
                  ];


                  exchange.setProperty('routesToCheck', routesToCheck);


                  // Initialize the health status map

                  def healthStatus = [
                    timestamp: new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(new Date()),
                    system: "Order Processing System",
                    routes: [:],
                    overallStatus: "HEALTHY"
                  ];

                  exchange.setProperty('healthDetails', healthStatus);
        - log:
            message: "Performing dynamic health check for routes:
              ${exchange.getProperty('routesToCheck')}"
        - loop:
            steps:
              - setHeader:
                  expression:
                    groovy: exchange.getProperty('routesToCheck')[exchange.getProperty('CamelLoopIndex')]
                  name: CamelControlBusRouteId
              - setExchangePattern: InOut
              - toD:
                  uri: controlbus
                  parameters:
                    action: status
                    command: route
                    routeId: ${header.CamelControlBusRouteId}
              - script:
                  expression:
                    groovy:
                      expression: >
                        def healthMap = exchange.getProperty('healthDetails');

                        def routeId =
                        exchange.getProperty('routesToCheck')[exchange.getProperty('CamelLoopIndex')];

                        def status = request.body != null ? request.body : 'Not
                        Running'; // The body now contains the route's
                        status             


                        healthMap.routes[routeId] = [ status: status ];


                        // If any route is not 'Started', the overall system is
                        considered unhealthy

                        if (status != 'Started') {
                          healthMap.overallStatus = 'UNHEALTHY';
                        }
            expression:
              simple: ${exchange.getProperty('routesToCheck').size()}
        - setBody:
            expression:
              groovy: exchange.getProperty('healthDetails')
        - marshal:
            json: {}
- route:
    id: RouteMetricsRoute
    from:
      uri: platform-http:/admin/metrics
      parameters:
        httpMethodRestrict: GET
      steps:
        - script:
            expression:
              groovy:
                expression: |
                  import java.time.ZonedDateTime;
                  def metrics = [
                    timestamp: ZonedDateTime.now().toString(),
                    system: "Order Processing System",
                    routes: [
                      orderIngestion: [
                        id: "OrderIngestionRoute",
                        status: "unknown",
                        description: "Processes incoming order files"
                      ],
                      orderValidation: [
                        id: "OrderValidationRoute", 
                        status: "unknown",
                        description: "Validates order data integrity"
                      ],
                      inventoryCheck: [
                        id: "InventoryCheckRoute",
                        status: "unknown", 
                        description: "Verifies product availability"
                      ],
                      paymentProcessing: [
                        id: "PaymentProcessingRoute",
                        status: "unknown",
                        description: "Handles payment transactions"
                      ],
                      orderFulfillment: [
                        id: "OrderFulfillmentRoute",
                        status: "unknown",
                        description: "Manages shipping and tracking"
                      ],
                      notification: [
                        id: "NotificationRoute",
                        status: "unknown",
                        description: "Sends customer notifications"
                      ]
                    ],
                    controlCommands: [
                      "start - Start specific route",
                      "stop - Stop specific route", 
                      "start-pipeline - Start all processing routes",
                      "stop-pipeline - Stop all processing routes",
                      "maintenance-mode - Enter maintenance mode",
                      "resume-from-maintenance - Resume from maintenance",
                      "status - Get route status"
                    ]
                  ]; request.body = metrics;
        - marshal:
            json: {}
- route:
    id: ConfigurationManagementRoute
    from:
      uri: platform-http:/admin/config
      parameters:
        httpMethodRestrict: PUT
      steps:
        - log:
            message: Configuration update request received
        - unmarshal:
            json: {}
        - script:
            expression:
              groovy:
                expression: >
                  import java.time.ZonedDateTime;

                  def config = request.body;  def response = [
                    status: "success",
                    message: "Configuration updated",
                    timestamp: ZonedDateTime.now().toString(),
                    updatedSettings: config
                  ];

                  // Apply configuration changes via Control Bus if
                  (config.maintenanceMode) {
                    request.headers.triggerMaintenance = true;
                  } if (config.emergencyStop) {
                    request.headers.triggerEmergencyStop = true;
                  }

                  request.body = response;
        - choice:
            when:
              - steps:
                  - setHeader:
                      constant: maintenance-mode
                      name: action
                  - to:
                      uri: direct:processControlCommand
                simple: ${header.triggerMaintenance} == true
              - steps:
                  - setHeader:
                      constant: stop-pipeline
                      name: action
                  - to:
                      uri: direct:processControlCommand
                simple: ${header.triggerEmergencyStop} == true
        - marshal:
            json: {}
- route:
    id: ScheduledMaintenanceRoute
    from:
      uri: timer:scheduledMaintenance
      parameters:
        delay: 10000
        period: 3600000
      steps:
        - script:
            expression:
              js:
                expression: var currentHour = new Date().getHours(); // Schedule maintenance
                  between 2 AM and 4 AM var isMaintenanceWindow = currentHour >=
                  2 && currentHour < 4;
                  //exchange.in.headers.isMaintenanceWindow =
                  isMaintenanceWindow;
                  exchange.in.setHeader('isMaintenanceWindow',
                  isMaintenanceWindow);
        - choice:
            otherwise:
              steps:
                - log:
                    message: Outside maintenance window - ensuring services are running
                - setHeader:
                    constant: resume-from-maintenance
                    name: action
                - to:
                    uri: direct:processControlCommand
            when:
              - steps:
                  - log:
                      message: Maintenance window detected - entering maintenance mode
                  - setHeader:
                      constant: maintenance-mode
                      name: action
                  - to:
                      uri: direct:processControlCommand
                simple: ${header.isMaintenanceWindow} == true
- route:
    id: CircuitBreakerMonitorRoute
    autoStartup: false
    from:
      uri: timer:circuitBreakerMonitor
      parameters:
        delay: 5000
        period: 30000
      steps:
        - script:
            expression:
              groovy:
                expression: >
                  // Simulate monitoring external service health 

                  // Log the start of the script execution println "Starting
                  circuit breaker monitoring script"

                  def paymentGatewayHealth = Math.random() > 0.1 def
                  inventoryServiceHealth = Math.random() > 0.05 // 95% uptime

                  exchange.in.setHeader('paymentGatewayHealthy',
                  paymentGatewayHealth);
                  exchange.in.setHeader('inventoryServiceHealthy',
                  inventoryServiceHealth);

                  //log.info("Payment Gateway Healthy: " + paymentGatewayHealth)
                  log.info("Inventory Service Healthy: " +
                  inventoryServiceHealth)
        - choice:
            otherwise:
              steps:
                - log:
                    message: All external services healthy - ensuring routes are running
                      ${header.paymentGatewayHealthy}
                      ${header.inventoryServiceHealthy}
            when:
              - steps:
                  - log:
                      message: Payment gateway unhealthy - stopping payment processing route
                  - setHeader:
                      constant: stop
                      name: action
                  - setHeader:
                      constant: PaymentProcessingRoute
                      name: routeId
                  - to:
                      uri: direct:processControlCommand
                simple: ${header.paymentGatewayHealthy} == false
              - steps:
                  - log:
                      message: Inventory service unhealthy - stopping inventory check route
                  - setHeader:
                      constant: stop
                      name: action
                  - setHeader:
                      constant: InventoryCheckRoute
                      name: routeId
                  - to:
                      uri: direct:processControlCommand
                simple: ${header.inventoryServiceHealthy} == false
- route:
    id: LoadBasedControlRoute
    autoStartup: false
    from:
      uri: timer:loadMonitor
      parameters:
        delay: 15000
        period: 60000
      steps:
        - script:
            expression:
              groovy:
                expression: >
                  // Simulate system load monitoring  def cpuUsage =
                  Math.random() * 100; def memoryUsage = Math.random() *
                  100;  def queueSize = Math.floor(Math.random() * 1000);

                  exchange.in.setHeader('cpuUsage', cpuUsage);
                  exchange.in.setHeader('memoryUsage', memoryUsage);
                  exchange.in.setHeader('queueSize', queueSize);

                  // Determine if system is under high load  def highLoad =
                  cpuUsage > 80 || memoryUsage > 85 || queueSize > 500;

                  exchange.in.setHeader('highLoad', highLoad);
        - log:
            message: "System metrics - CPU: ${header.cpuUsage}%, Memory:
              ${header.memoryUsage}%, Queue: ${header.queueSize}"
        - choice:
            otherwise:
              steps:
                - log:
                    message: System load normal - ensuring all routes are active
                - setHeader:
                    constant: start
                    name: action
                - setHeader:
                    constant: NotificationRoute
                    name: routeId
                - to:
                    uri: direct:processControlCommand
            when:
              - steps:
                  - log:
                      message: High system load detected - throttling non-critical routes
                  - setHeader:
                      constant: stop
                      name: action
                  - setHeader:
                      constant: NotificationRoute
                      name: routeId
                  - to:
                      uri: direct:processControlCommand
                  - to:
                      uri: controlbus:route
                      parameters:
                        action: stop
                        routeId: OrderIngestionRoute
                  - delay:
                      constant: "2000"
                  - to:
                      uri: controlbus:route
                      parameters:
                        action: start
                        routeId: OrderIngestionRoute
                simple: ${header.highLoad} == true
- route:
    id: BusinessHoursControlRoute
    autoStartup: false
    from:
      uri: timer:businessHours
      parameters:
        delay: 20000
        period: 300000
      steps:
        - script:
            expression:
              groovy:
                expression: >
                  def now = new Date();  def hour = now.getHours();  def
                  dayOfWeek = now.getDay(); // 0 = Sunday, 6 = Saturday

                  // Business hours: Monday-Friday, 9 AM - 6 PM  def
                  isBusinessHours = (dayOfWeek >= 1 && dayOfWeek <= 5) && (hour
                  >= 9 && hour < 18);

                  exchange.in.setHeader('isBusinessHours', isBusinessHours);
        - choice:
            otherwise:
              steps:
                - log:
                    message: Outside business hours - limited processing mode
                - setHeader:
                    constant: start
                    name: action
                - setHeader:
                    constant: OrderIngestionRoute
                    name: routeId
                - to:
                    uri: direct:processControlCommand
                - setHeader:
                    constant: stop
                    name: action
                - setHeader:
                    constant: OrderFulfillmentRoute
                    name: routeId
                - to:
                    uri: direct:processControlCommand
            when:
              - steps:
                  - log:
                      message: Business hours - enabling full order processing
                  - setHeader:
                      constant: start-pipeline
                      name: action
                  - to:
                      uri: direct:processControlCommand
                simple: ${header.isBusinessHours} == true
- route:
    id: EmergencyShutdownRoute
    from:
      uri: platform-http:/admin/emergency-shutdown
      parameters:
        httpMethodRestrict: POST
      steps:
        - log:
            loggingLevel: ERROR
            message: EMERGENCY SHUTDOWN INITIATED
        - setHeader:
            constant: stop-pipeline
            name: action
        - to:
            uri: direct:processControlCommand
        - log:
            loggingLevel: WARN
            message: All order processing routes have been stopped
        - setBody:
            simple: '{"status": "emergency_shutdown_complete", "message": "All order
              processing routes stopped", "timestamp": "${date:now:yyyy-MM-dd
              HH:mm:ss}"}'
