- route:
    id: route-2246
    from:
      id: from-3437
      uri: platform-http:/webhook/whatsapp
      parameters:
        httpMethodRestrict: POST
      steps:
        - log:
            id: log-1962
            message: Received WhatsApp webhook payload
        - unmarshal:
            id: unmarshal-1404
            json: {}
        - log:
            id: log-6241
            message: "Unmarshalled payload: ${body}"
        - script:
            id: script-3962
            expression:
              groovy:
                expression: >-
                  def payload = exchange.getIn().getBody()

                  if (!payload) {
                                println "Payload is undefined or null"
                                exchange.getIn().setBody(null)
                                return
                  }

                  def messages = payload.messages ?: []


                  if (messages.size() > 0) {
                    def msg = messages[0]
                    def contact = payload.contacts ? payload.contacts[0] : [:]

                    exchange.getIn().setBody([
                      messageId    : msg.id ?: "",
                      from         : msg.from ?: "",
                      customerName : contact.profile?.name ?: "Unknown",
                      timestamp    : msg.timestamp ?: System.currentTimeMillis(),
                      text         : msg.text?.body ?: "",
                      type         : msg.type ?: "unknown"
                      ])
                  } else {
                                exchange.getIn().setBody(null)
                  }
        - filter:
            id: filter-3216
            steps:
              - setHeader:
                  id: setHeader-2980
                  expression:
                    simple:
                      expression: ${body[from]}
                  name: customerId
              - setHeader:
                  id: setHeader-2981
                  expression:
                    simple:
                      expression: ${body[messageId]}
                  name: messageId
              - setHeader:
                  id: setHeader-2982
                  expression:
                    simple:
                      expression: ${body[customerName]}
                  name: customerName
              - setHeader:
                  id: setHeader-2983
                  expression:
                    simple:
                      expression: ${body[timestamp]}
                  name: messageTimestamp
              - setHeader:
                  id: setHeader-2985
                  expression:
                    simple:
                      expression: ${body[text]}
                  name: messageText
              - log:
                  id: log-3369
                  message: "Processing WhatsApp message from ${header.customerName}:
                    ${header.messageText}"
              - setHeader:
                  id: setHeader-cache-action
                  constant: GET
                  name: CamelCaffeineAction
              - setHeader:
                  id: setHeader-cache-key
                  expression:
                    simple:
                      expression: ${header.customerId}
                  name: CamelCaffeineKey
              - to:
                  id: to-caffeine-cache
                  uri: caffeine-cache://activeTickets
              - log:
                  id: log-cache-result
                  message: "Cache result - Has Result: ${header.CamelCaffeineActionHasResult},
                    Action Succeeded: ${header.CamelCaffeineActionSucceeded}"
              - choice:
                  id: choice-1204
                  otherwise:
                    id: "otherwise "
                    steps:
                      - log:
                          id: log-1125
                          message: No active ticket found for customer ${header.customerName}, will create
                            new ticket
                  when:
                    - id: "when "
                      steps:
                        - log:
                            id: log-1244
                            message: Found active ticket ==> ${body}
                        - setHeader:
                            id: setHeader
                            expression:
                              simple:
                                expression: ${body}
                            name: activeTicketId
                        - log:
                            id: log-1239
                            message: Found active ticket ${header.activeTicketId} for customer
                              ${header.customerName}
                      expression:
                        simple:
                          expression: ${header.CamelCaffeineActionHasResult} == true
            expression:
              simple:
                expression: ${body} != null
        - setBody:
            id: setBody-response
            expression:
              simple: '{"status":"success","isTicketPresent":
                ${header.CamelCaffeineActionHasResult} }'
        - setHeader:
            id: setHeader-content-type
            constant: application/json
            name: Content-Type
        - to:
            id: process-whatsapp-message
            uri: direct:process-whatsapp-message
            parameters: {}
- route:
    id: ProcessWhatsappMessage
    from:
      id: from-2300
      uri: direct:process-whatsapp-message
      parameters: {}
      steps:
        - choice:
            id: choice-2934
            otherwise:
              id: otherwise-1138
              steps:
                - log:
                    id: log-2629
                    message: Add comment to existing ticket
            when:
              - id: when-2588
                steps:
                  - log:
                      id: log-2540
                      message: ProcessWhatsappMessage ==> This is a new ticket
                  - setBody:
                      id: setBody-3215
                      expression:
                        simple:
                          expression: >-
                            Please analyze the following customer support
                            message and determine:
                              1. The primary intent/request of the customer
                              2. Customer mood (e.g. angry, satisfied, confused, etc.)
                              3. Urgency level (Low, Medium, High)
                              4. Severity level (Low, Medium, High)
                              
                              Format your response as JSON with the fields: 
                              {
                                "intent": "brief description of customer's intent", 
                                "mood": "customer's emotional state", 
                                "urgency": "urgency level", 
                                "severity": "severity level"
                              }
                              
                              Here's the customer message:
                              ${header.messageText}
                  - log:
                      id: log-2539
                      message: Customer support message set
                  - to:
                      id: call-llm-api
                      uri: direct:call-llm-api
                      parameters: {}
                  - to:
                      id: create-trello-ticket
                      uri: direct:create-trello-ticket
                      parameters: {}
                expression:
                  simple:
                    expression: ${header.activeTicketId} == null
- route:
    id: CallLLMAPI
    from:
      id: from-2300
      uri: direct:call-llm-api
      parameters: {}
      steps:
        - log:
            id: log-llm
            message: Calling LLM API for analysis
        - setBody:
            id: setBody-llm
            expression:
              simple: >
                curl -X POST https://qwen-qwq-32b-demo.hf.space/gradio_api/call/submit -s -H "Content-Type: application/json" -d '{
                  "data": [
                    "You are a helpful support ticket analyzer. Your role is to assist in analyzing customer support messages received via WhatsApp. For each message, you must determine the following:\\n\\n1. The primary intent or request of the customer.\\n2. The customer'\''s mood (e.g., angry, satisfied, confused, etc.).\\n3. The urgency level (Low, Medium, High).\\n4. The severity level (Low, Medium, High).\\n\\nProvide your response in JSON format with the following fields:\\n{\\n  \\"intent\\": \\"brief description of customer'\''s intent\\",\\n  \\"mood\\": \\"customer'\''s emotional state\\",\\n  \\"urgency\\": \\"urgency level\\",\\n  \\"severity\\": \\"severity level\\"\\n}\\n\\nBe concise and accurate in your analysis to help streamline the support process."
                  ]
                }' \
                | awk -F'"' '{ print $4 }' \
                | read EVENT_ID; curl -N https://qwen-qwq-32b-demo.hf.space/gradio_api/call/submit/$EVENT_ID &&
                curl -X POST https://qwen-qwq-32b-demo.hf.space/gradio_api/call/update_browser_state -s -H "Content-Type: application/json" -d '{}' \
                | awk -F'"' '{ print $4 }' \
                | read EVENT_ID; curl -N https://qwen-qwq-32b-demo.hf.space/gradio_api/call/update_browser_state/$EVENT_ID &&
                curl -X POST https://qwen-qwq-32b-demo.hf.space/gradio_api/call/submit -s -H "Content-Type: application/json" -d '{
                  "data": [
                    "${header.messageText}"
                  ]
                }' \
                | awk -F'"' '{ print $4 }' \
                | read EVENT_ID; curl -N https://qwen-qwq-32b-demo.hf.space/gradio_api/call/submit/$EVENT_ID &&
                curl -X POST https://qwen-qwq-32b-demo.hf.space/gradio_api/call/update_browser_state -s -H "Content-Type: application/json" -d '{}' \
                | awk -F'"' '{ print $4 }' \
                | read EVENT_ID; curl -N https://qwen-qwq-32b-demo.hf.space/gradio_api/call/update_browser_state/$EVENT_ID
        - to:
            id: exec-llm
            uri: exec:sh
            # parameters:
            #   workingDir: C:\\tmp
        - log:
            id: log-llm-response
            message: "LLM API response: ${body}"
        - setBody:
            id: setBody-llm
            expression:
              constant: >
                {"intent":"Cannot determine - API error", "mood":"unknown",
                "urgency":"Medium", "severity":"Medium"}
- route:
    id: CreateTrelloTicket
    from:
      id: from-2300
      uri: direct:create-trello-ticket
      parameters: {}
      steps:
        - removeHeaders:
            id: remove CamelHttp*
            pattern: CamelHttp*
        - removeHeader:
            id: remove CamelHttpQuery
            name: CamelHttpQuery
        - removeHeader:
            id: remove use agent
            name: User-Agent
        - setHeader:
            expression:
              simple: name=${header.customerName}&desc=${header.messageText}&idList=68148cc61f43f14863948ee7&key={{TRELLO_API_KEY}}&token={{TRELLO_API_TOKEN}}
            name: CamelHttpQuery
        - log:
            id: log-create-ticket
            message: Creating Trello ticket for customer ${header.CamelHttpQuery}
        - doTry:
            steps:
              - to:
                  uri: https://api.trello.com/1/cards
                  parameters:
                    bridgeEndpoint: "true"
                    followRedirects: "true"
                    httpMethod: POST
                    useSystemProperties: "false"
            doCatch:
              - steps:
                  - log:
                      message: "Error creating Trello ticket: ${exception.message}"
                  - setBody:
                      expression:
                        constant: '{"status":"error","message":"Failed to create Trello ticket"}'
                exception: java.lang.Exception
        - setBody:
            id: setBody-contexxt
            expression:
              simple: ${body}
