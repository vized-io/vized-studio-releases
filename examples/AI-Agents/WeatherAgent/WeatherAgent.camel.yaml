- route:
    id: WeatherAgent
    from:
      id: Http Endpoint
      uri: platform-http
      parameters:
        httpMethodRestrict: POST
        path: /chat
      steps:
        - convertBodyTo:
            id: Convert Body
            type: java.lang.String
        
        - script:
            id: Script
            expression:
              groovy:
                expression: |-
                  import dev.langchain4j.data.message.UserMessage
                  import dev.langchain4j.data.message.ChatMessage;
                  import dev.langchain4j.data.message.SystemMessage;
                  
                  //def question = exchange.in.body?.toString()
                  //def userMessage = UserMessage.from(question)
                  //exchange.in.body = userMessage
                  def payload = exchange.in.getBody(String.class);
                  def messages = [];

                  def systemPrompt = """
                    You are the Vized AI Assistant. 
                    You have access to a collection of tools.
                    You can use multiple tools at the same time.
                    Complete your answer using data obtained from the tools.
                    """;
                  
                  messages.add( new SystemMessage(systemPrompt) );
                  messages.add(new UserMessage(payload));

                  exchange.in.body = messages;
        
        - log:
            id: Log Request
            message: "Chat request received..."
        
        - to:
            id: ToolProcessor
            uri: langchain4j-tools:weatherQuery
            parameters:
              tags: assistant-tools
              chatModel: "#ollamaChatModel"
        
        - log:
            id: Log Chat
            message: "Chat completed: ${body}"
        
        - setHeader:
            name: Content-Type
            constant: application/json

# Weather Tool
- route:
    id: WeatherTool
    from:
      uri: langchain4j-tools:getWeather
      parameters:
        tags: assistant-tools
        description: Get current weather information for a specific location
        parameter.location: string
      steps:
        - log:
            message: "Weather tool called for location: ${header.location}"
        - setProperty:
            name: location
            simple:
              expression: "${header.location}"

        - removeHeaders:
            pattern: '*'
        - toD:
            uri: "https://geocoding-api.open-meteo.com/v1/search"
            parameters:
              httpMethod: GET
              name: ${exchangeProperty.location}
              limit: 1
        - unmarshal:
            json:
              library: Jackson
        - removeHeaders:
            pattern: '*'
        - log: "Geocoding Response: ${body[results]}"
        - toD:
            uri: "https://api.open-meteo.com/v1/forecast"
            parameters:
              httpMethod: GET
              latitude: ${body[results][0][latitude]}
              longitude: ${body[results][0][longitude]}
              current: temperature_2m,precipitation
        - unmarshal:
            json:
              library: Jackson
        - log:
            message: "Weather tool response: ${body}"

- beans:
    - name: ollamaChatModel
      script: |
        import dev.langchain4j.model.ollama.OllamaChatModel
        
        return OllamaChatModel.builder()
          .baseUrl("http://192.168.31.142:11434")
          .modelName("qwen3:0.6b")
          .temperature(0.7)
          .build()
      scriptLanguage: groovy
      type: dev.langchain4j.model.ollama.OllamaChatModel
    
    - name: geminiChatModel
      script: |
        import dev.langchain4j.model.googleai.GoogleAiGeminiChatModel
        
        return GoogleAiGeminiChatModel.builder()
          .apiKey("samplekeyy")
          .modelName("gemini-2.0-flash")
          .temperature(0.7)
          .maxOutputTokens(1024)
          .build()

      scriptLanguage: groovy
      type: dev.langchain4j.model.googleai.GoogleAiGeminiChatModel
