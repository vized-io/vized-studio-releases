# camel-k: dependency=camel:saga
# camel-k: dependency=camel:http
# camel-k: dependency=camel:log
# camel-k: dependency=camel:timer

- onException:
    exception:
      - java.lang.RuntimeException
    handled:
      constant: "true"
    # logStackTrace: false
    # logExhausted: false
    # logRetryStackTrace: false
    # logHandled: true
    # logLevel: "INFO"
    steps:
      - to:
          id: route-to-global-error-handler
          uri: direct:saga-error
          parameters: {}

- route:
    id: saga-orchestrator-route
    from:
      uri: timer:saga-trigger
      parameters:
        period: 30000
        repeatCount: 3
      steps:
        - setHeader:
            id: set-correlation-id
            name: CorrelationId
            expression:
              simple: "${random(1000,9999)}"
        - setHeader:
            id: set-order-amount
            name: OrderAmount
            expression:
              simple: "${random(100,1000)}"
        - log:
            id: log-saga-start
            message: "Starting SAGA transaction with CorrelationId: ${header.CorrelationId}, Amount: ${header.OrderAmount}"
        - saga:
            id: saga-transaction
            # compensation: "true"
            completionMode: AUTO
            steps:
              - log:
                  id: log-step1-start
                  message: "SAGA Step 1: Processing payment for amount ${header.OrderAmount}"
              - to:
                  id: call-payment-service
                  uri: direct:payment-service
                  parameters:
                    timeout: 5000
              - log:
                  id: log-step1-complete
                  message: "SAGA Step 1: Payment processed successfully"
              - log:
                  id: log-step2-start
                  message: "SAGA Step 2: Reserving inventory for order ${header.CorrelationId}"
              - to:
                  id: call-inventory-service
                  uri: direct:inventory-service
                  parameters:
                    timeout: 5000
              - log:
                  id: log-step2-complete
                  message: "SAGA Step 2: Inventory reserved successfully"
              - log:
                  id: log-step3-start
                  message: "SAGA Step 3: Creating shipping order for ${header.CorrelationId}"
              - to:
                  id: call-shipping-service
                  uri: direct:shipping-service
                  parameters:
                    timeout: 5000
              - log:
                  id: log-step3-complete
                  message: "SAGA Step 3: Shipping order created successfully"
        - log:
            id: log-saga-success
            message: "SAGA transaction completed successfully for CorrelationId: ${header.CorrelationId}"

- route:
    id: payment-service-route
    from:
      uri: direct:payment-service
      steps:
        - saga:
            id: payment-compensation
            compensation:
              uri: direct:compensate-payment
              parameters:
                timeout: 3000
        - choice:
            id: payment-decision
            when:
              - expression:
                  simple: "${header.OrderAmount} > 800"
                id: payment-failure-condition
                steps:
                  - throwException:
                      id: payment-exception
                      exceptionType: java.lang.RuntimeException
                      message: "Payment failed for high amount: ${header.OrderAmount}"
            otherwise:
              id: payment-success-path
              steps:
                - setHeader:
                    id: set-payment-id
                    name: PaymentId
                    expression:
                      simple: "PAY-${header.CorrelationId}"
                - log:
                    id: log-payment-success
                    message: "Payment processed with ID: ${header.PaymentId}"
                
- route:
    id: inventory-service-route
    from:
      uri: direct:inventory-service
      steps:
        - saga:
            id: inventory-compensation
            compensation:
              uri: direct:compensate-inventory
              parameters:
                timeout: 3000
        - choice:
            id: inventory-decision
            when:
              - expression:
                  simple: "${random(1,10)} > 7"
                id: inventory-failure-condition
                steps:
                  - throwException:
                      id: inventory-exception
                      exceptionType: java.lang.RuntimeException
                      message: "Inventory reservation failed - out of stock"
            otherwise:
              id: inventory-success-path
              steps:
                - setHeader:
                    id: set-inventory-id
                    name: InventoryId
                    expression:
                      simple: "INV-${header.CorrelationId}"
                - log:
                    id: log-inventory-success
                    message: "Inventory reserved with ID: ${header.InventoryId}"

- route:
    id: shipping-service-route
    from:
      uri: direct:shipping-service
      steps:
        - saga:
            id: shipping-compensation
            compensation:
              uri: direct:compensate-shipping
              parameters:
                timeout: 3000
        - choice:
            id: shipping-decision
            when:
              - expression:
                  simple: "${random(1,10)} > 8"
                id: shipping-failure-condition
                steps:
                  - throwException:
                      id: shipping-exception
                      exceptionType: java.lang.RuntimeException
                      message: "Shipping service unavailable"
            otherwise:
              id: shipping-success-path
              steps:
                - setHeader:
                    id: set-shipping-id
                    name: ShippingId
                    expression:
                      simple: "SHIP-${header.CorrelationId}"
                - log:
                    id: log-shipping-success
                    message: "Shipping order created with ID: ${header.ShippingId}"

- route:
    id: compensate-payment-route
    from:
      uri: direct:compensate-payment
      steps:
        - log:
            id: log-payment-compensation
            message: "COMPENSATING: Refunding payment ${header.PaymentId} for CorrelationId: ${header.CorrelationId}"
        - delay:
            id: payment-compensation-delay
            expression:
              constant: "1000"
        - log:
            id: log-payment-compensated
            message: "COMPENSATED: Payment ${header.PaymentId} refunded successfully"

- route:
    id: compensate-inventory-route
    from:
      uri: direct:compensate-inventory
      steps:
        - log:
            id: log-inventory-compensation
            message: "COMPENSATING: Releasing inventory ${header.InventoryId} for CorrelationId: ${header.CorrelationId}"
        - delay:
            id: inventory-compensation-delay
            expression:
              constant: "800"
        - log:
            id: log-inventory-compensated
            message: "COMPENSATED: Inventory ${header.InventoryId} released successfully"

- route:
    id: compensate-shipping-route
    from:
      uri: direct:compensate-shipping
      steps:
        - log:
            id: log-shipping-compensation
            message: "COMPENSATING: Cancelling shipping order ${header.ShippingId} for CorrelationId: ${header.CorrelationId}"
        - delay:
            id: shipping-compensation-delay
            expression:
              constant: "500"
        - log:
            id: log-shipping-compensated
            message: "COMPENSATED: Shipping order ${header.ShippingId} cancelled successfully"

- route:
    id: global-error-handler-route
    from:
      uri: direct:saga-error
      steps:
        - log:
            id: log-saga-error
            message: "SAGA FAILED: Transaction failed for id: ${header.CorrelationId}. Error: ${exception.message}"
        - setBody:
            id: set-error-response
            expression:
              simple: "SAGA transaction failed: ${exception.message}"


