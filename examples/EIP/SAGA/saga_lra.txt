- rest:
    id: saga-rest-api
    consumes: application/json
    produces: application/json
    path: /api
    get:
      - id: get-saga-tracker-endpoint
        path: /saga-tracker
        to: 
          uri: direct:getSagaTracker
    post:
      - id: process-order-endpoint
        path: /orders
        to: 
          uri: direct:processOrder
- beans:
    - name: sagaTracker
      type: java.util.concurrent.ConcurrentHashMap
- route:
    id: get-saga-tracker
    from:
      id: saga-tracker-consumer
      uri: direct:getSagaTracker
      steps:
        - script:
            id: saga-tracker-script
            expression:
              groovy: |
                def sagaTracker = exchange.context.registry.lookupByName('sagaTracker')
                def result = [:]

                if (sagaTracker.isEmpty()) {
                  result.message = "No active or completed sagas"
                  result.count = 0
                  result.sagas = [:]
                } else {
                  result.message = "Saga tracking status"
                  result.count = sagaTracker.size()
                  result.sagas = [:]
                  
                  sagaTracker.each { lraId, orderData ->
                    result.sagas[lraId] = orderData
                  }
                }

                exchange.in.body = groovy.json.JsonBuilder(result).toPrettyString()
- route:
    id: order-processing-saga
    from:
      id: process-order-consumer
      uri: direct:processOrder
      steps:
        - log: 
            id: log-received-order
            message: "Received order: ${body}"
        - unmarshal:
            id: unmarshal-json
            json: {}
        - setHeader:
            id: set-order-id-header
            name: orderId
            expression:
              simple: ${body[orderId]}
        - setHeader:
            id: set-saga-id-header
            name: sagaId
            expression:
              simple: ${random(1000,9999)}
        - log: 
            id: log-saga-start
            message: "SAGA: Starting saga ${header.sagaId} for order ${header.orderId}"
        - saga:
            id: saga-main
            compensation: 
              uri: direct:sagaCompensate
            completion: 
              uri: direct:sagaComplete
            option:
              - key: orderId
                expression:
                  simple: ${header.orderId}
              - key: startedAt
                expression:
                  simple: ${date:now:yyyy-MM-dd'T'HH:mm:ss}
        - script:
            id: saga-tracking-script
            expression:
              groovy: |
                def lraId = exchange.in.headers['Long-Running-Action']
                def orderId = exchange.in.headers['orderId']
                def sagaId = exchange.in.headers['sagaId']
                def sagaTracker = exchange.context.registry.lookupByName('sagaTracker')

                def orderData = [
                  orderId: orderId,
                  sagaId: sagaId,
                  status: 'STARTED',
                  steps: [],
                  startTime: new Date().toString()
                ]

                sagaTracker.put(lraId, orderData)
                println "TRACKING: Stored order ${orderId} with LRA ${lraId}"
        - to: 
            id: call-reserve-inventory
            uri: direct:reserveInventory
        - saga:
            id: saga-inventory-compensation
            compensation: 
              uri: direct:releaseInventory
        - to: 
            id: call-process-payment
            uri: direct:processPayment
        - saga:
            id: saga-payment-compensation
            compensation: 
              uri: direct:refundPayment
        - to: 
            id: call-ship-order
            uri: direct:shipOrder
        - saga:
            id: saga-shipping-compensation
            compensation: 
              uri: direct:cancelShipment
        - setBody:
            id: set-success-response
            expression:
              simple: '{"status": "success", "orderId": "${header.orderId}", "sagaId": "${header.sagaId}"}'
- route:
    id: saga-complete
    from:
      id: saga-complete-consumer
      uri: direct:sagaComplete
      steps:
        - log: 
            id: log-saga-completion
            message: "COMPLETION: LRA-ID = ${header.Long-Running-Action}"
        - script:
            id: saga-completion-script
            expression:
              groovy: |
                def lraId = exchange.in.headers['Long-Running-Action']
                def sagaTracker = exchange.context.registry.lookupByName('sagaTracker')
                def orderData = sagaTracker.get(lraId)

                if (orderData) {
                  println "SUCCESS: Order ${orderData.orderId} completed successfully (Saga: ${orderData.sagaId})"
                  
                  // Update tracking data
                  orderData.status = 'COMPLETED'
                  orderData.endTime = new Date().toString()
                  orderData.steps.add('SAGA_COMPLETED')
                  sagaTracker.put(lraId, orderData)
                } else {
                  println "COMPLETION: No order data found for LRA ${lraId}"
                }
- route:
    id: saga-compensate
    from:
      id: saga-compensate-consumer
      uri: direct:sagaCompensate
      steps:
        - log: 
            id: log-saga-compensation
            message: "COMPENSATION: LRA-ID = ${header.Long-Running-Action}"
        - script:
            id: saga-compensation-script
            expression:
              groovy: |
                def lraId = exchange.in.headers['Long-Running-Action']
                def sagaTracker = exchange.context.registry.lookupByName('sagaTracker')
                def orderData = sagaTracker.get(lraId)

                if (orderData) {
                  println "COMPENSATION: Order ${orderData.orderId} failed and needs rollback (Saga: ${orderData.sagaId})"
                  println "COMPENSATION: Failed at step ${orderData.currentStep} - Reason: ${orderData.failureReason}"
                  
                  // Update tracking data
                  orderData.status = 'COMPENSATING'
                  orderData.compensationStartTime = new Date().toString()
                  orderData.steps.add('SAGA_COMPENSATION_STARTED')
                  sagaTracker.put(lraId, orderData)
                } else {
                  println "COMPENSATION: No order data found for LRA ${lraId}"
                }
- route:
    id: reserve-inventory
    from:
      id: reserve-inventory-consumer
      uri: direct:reserveInventory
      steps:
        - log: 
            id: log-inventory-processing
            message: "INVENTORY: Processing order ${header.orderId}"
        - script:
            id: inventory-tracking-script
            expression:
              groovy: |
                def lraId = exchange.in.headers['Long-Running-Action']
                def sagaTracker = exchange.context.registry.lookupByName('sagaTracker')
                def orderData = sagaTracker.get(lraId)

                if (orderData) {
                  orderData.currentStep = 'INVENTORY'
                  orderData.steps.add('INVENTORY_STARTED')
                  sagaTracker.put(lraId, orderData)
                }
        - script:
            id: inventory-last-digit-script
            expression:
              groovy: |
                def orderId = exchange.in.headers['orderId']
                def lastDigit = orderId.substring(orderId.length() - 1)
                exchange.properties.lastDigit = lastDigit
                println "DEBUG: OrderId=${orderId}, LastDigit=${lastDigit}"
        - choice:
            id: inventory-choice
            when:
              - id: inventory-failure-condition
                expression:
                  simple: ${exchangeProperty.lastDigit} in '1,3,5'
                steps:
                  - log: 
                      id: log-inventory-error
                      message: "ERROR: Inventory failed for ${header.orderId} (last digit: ${exchangeProperty.lastDigit})"
                  - script:
                      id: inventory-failure-script
                      expression:
                        groovy: |
                          def lraId = exchange.in.headers['Long-Running-Action']
                          def sagaTracker = exchange.context.registry.lookupByName('sagaTracker')
                          def orderData = sagaTracker.get(lraId)

                          if (orderData) {
                            orderData.failureReason = "Inventory not available (last digit: ${exchange.properties.lastDigit})"
                            orderData.steps.add('INVENTORY_FAILED')
                            sagaTracker.put(lraId, orderData)
                          }
                  - throwException:
                      id: throw-inventory-exception
                      exceptionType: java.lang.RuntimeException
                      message: Inventory not available
            otherwise:
              id: inventory-success-branch
              steps:
                - log: 
                    id: log-inventory-success
                    message: "SUCCESS: Inventory reserved for ${header.orderId}"
                - setHeader:
                    id: set-inventory-reserved-header
                    name: inventoryReserved
                    expression:
                      constant: true
                - script:
                    id: inventory-success-script
                    expression:
                      groovy: |
                        def lraId = exchange.in.headers['Long-Running-Action']
                        def sagaTracker = exchange.context.registry.lookupByName('sagaTracker')
                        def orderData = sagaTracker.get(lraId)

                        if (orderData) {
                          orderData.steps.add('INVENTORY_SUCCESS')
                          sagaTracker.put(lraId, orderData)
                        }
- route:
    id: process-payment
    from:
      id: process-payment-consumer
      uri: direct:processPayment
      steps:
        - log: 
            id: log-payment-processing
            message: "PAYMENT: Processing order ${header.orderId}"
        - script:
            id: payment-tracking-script
            expression:
              groovy: |
                def lraId = exchange.in.headers['Long-Running-Action']
                def sagaTracker = exchange.context.registry.lookupByName('sagaTracker')
                def orderData = sagaTracker.get(lraId)

                if (orderData) {
                  orderData.currentStep = 'PAYMENT'
                  orderData.steps.add('PAYMENT_STARTED')
                  sagaTracker.put(lraId, orderData)
                }
        - choice:
            id: payment-choice
            when:
              - id: payment-failure-condition
                expression:
                  simple: ${exchangeProperty.lastDigit} in '2,6'
                steps:
                  - log: 
                      id: log-payment-error
                      message: "ERROR: Payment failed for ${header.orderId} (last digit: ${exchangeProperty.lastDigit})"
                  - script:
                      id: payment-failure-script
                      expression:
                        groovy: |
                          def lraId = exchange.in.headers['Long-Running-Action']
                          def sagaTracker = exchange.context.registry.lookupByName('sagaTracker')
                          def orderData = sagaTracker.get(lraId)

                          if (orderData) {
                            orderData.failureReason = "Payment declined (last digit: ${exchange.properties.lastDigit})"
                            orderData.steps.add('PAYMENT_FAILED')
                            sagaTracker.put(lraId, orderData)
                          }
                  - throwException:
                      id: throw-payment-exception
                      exceptionType: java.lang.RuntimeException
                      message: Payment declined
            otherwise:
              id: payment-success-branch
              steps:
                - log: 
                    id: log-payment-success
                    message: "SUCCESS: Payment processed for ${header.orderId}"
                - setHeader:
                    id: set-payment-processed-header
                    name: paymentProcessed
                    expression:
                      constant: true
                - script:
                    id: payment-success-script
                    expression:
                      groovy: |
                        def lraId = exchange.in.headers['Long-Running-Action']
                        def sagaTracker = exchange.context.registry.lookupByName('sagaTracker')
                        def orderData = sagaTracker.get(lraId)

                        if (orderData) {
                          orderData.steps.add('PAYMENT_SUCCESS')
                          sagaTracker.put(lraId, orderData)
                        }
- route:
    id: ship-order
    from:
      id: ship-order-consumer
      uri: direct:shipOrder
      steps:
        - log: 
            id: log-shipping-processing
            message: "SHIPPING: Processing order ${header.orderId}"
        - script:
            id: shipping-tracking-script
            expression:
              groovy: |
                def lraId = exchange.in.headers['Long-Running-Action']
                def sagaTracker = exchange.context.registry.lookupByName('sagaTracker')
                def orderData = sagaTracker.get(lraId)

                if (orderData) {
                  orderData.currentStep = 'SHIPPING'
                  orderData.steps.add('SHIPPING_STARTED')
                  sagaTracker.put(lraId, orderData)
                }
        - choice:
            id: shipping-choice
            when:
              - id: shipping-failure-condition
                expression:
                  simple: ${exchangeProperty.lastDigit} in '4,8'
                steps:
                  - log: 
                      id: log-shipping-error
                      message: "ERROR: Shipping failed for ${header.orderId} (last digit: ${exchangeProperty.lastDigit})"
                  - script:
                      id: shipping-failure-script
                      expression:
                        groovy: |
                          def lraId = exchange.in.headers['Long-Running-Action']
                          def sagaTracker = exchange.context.registry.lookupByName('sagaTracker')
                          def orderData = sagaTracker.get(lraId)

                          if (orderData) {
                            orderData.failureReason = "Shipping unavailable (last digit: ${exchange.properties.lastDigit})"
                            orderData.steps.add('SHIPPING_FAILED')
                            sagaTracker.put(lraId, orderData)
                          }
                  - throwException:
                      id: throw-shipping-exception
                      exceptionType: java.lang.RuntimeException
                      message: Shipping unavailable
            otherwise:
              id: shipping-success-branch
              steps:
                - log: 
                    id: log-shipping-success
                    message: "SUCCESS: Order shipped for ${header.orderId}"
                - setHeader:
                    id: set-order-shipped-header
                    name: orderShipped
                    expression:
                      constant: true
                - script:
                    id: shipping-success-script
                    expression:
                      groovy: |
                        def lraId = exchange.in.headers['Long-Running-Action']
                        def sagaTracker = exchange.context.registry.lookupByName('sagaTracker')
                        def orderData = sagaTracker.get(lraId)

                        if (orderData) {
                          orderData.steps.add('SHIPPING_SUCCESS')
                          sagaTracker.put(lraId, orderData)
                        }
- route:
    id: release-inventory
    from:
      id: release-inventory-consumer
      uri: direct:releaseInventory
      steps:
        - script:
            id: release-inventory-script
            expression:
              groovy: |
                def lraId = exchange.in.headers['Long-Running-Action']
                def sagaTracker = exchange.context.registry.lookupByName('sagaTracker')
                def orderData = sagaTracker.get(lraId)

                if (orderData) {
                  println "COMPENSATION-INVENTORY: Processing order ${orderData.orderId}"
                  
                  if (exchange.in.headers['inventoryReserved'] == true) {
                    println "COMPENSATION-INVENTORY: Released inventory for order ${orderData.orderId}"
                    orderData.steps.add('COMPENSATION_INVENTORY_SUCCESS')
                  } else {
                    println "COMPENSATION-INVENTORY: No inventory to release for order ${orderData.orderId}"
                    orderData.steps.add('COMPENSATION_INVENTORY_SKIPPED')
                  }
                  
                  sagaTracker.put(lraId, orderData)
                } else {
                  println "COMPENSATION-INVENTORY: No order data found"
                }
- route:
    id: refund-payment
    from:
      id: refund-payment-consumer
      uri: direct:refundPayment
      steps:
        - script:
            id: refund-payment-script
            expression:
              groovy: |
                def lraId = exchange.in.headers['Long-Running-Action']
                def sagaTracker = exchange.context.registry.lookupByName('sagaTracker')
                def orderData = sagaTracker.get(lraId)

                if (orderData) {
                  println "COMPENSATION-PAYMENT: Processing order ${orderData.orderId}"
                  
                  if (exchange.in.headers['paymentProcessed'] == true) {
                    println "COMPENSATION-PAYMENT: Refunded payment for order ${orderData.orderId}"
                    orderData.steps.add('COMPENSATION_PAYMENT_SUCCESS')
                  } else {
                    println "COMPENSATION-PAYMENT: No payment to refund for order ${orderData.orderId}"
                    orderData.steps.add('COMPENSATION_PAYMENT_SKIPPED')
                  }
                  
                  sagaTracker.put(lraId, orderData)
                } else {
                  println "COMPENSATION-PAYMENT: No order data found"
                }
- route:
    id: cancel-shipment
    from:
      id: cancel-shipment-consumer
      uri: direct:cancelShipment
      steps:
        - script:
            id: cancel-shipment-script
            expression:
              groovy: |
                def lraId = exchange.in.headers['Long-Running-Action']
                def sagaTracker = exchange.context.registry.lookupByName('sagaTracker')
                def orderData = sagaTracker.get(lraId)

                if (orderData) {
                  println "COMPENSATION-SHIPPING: Processing order ${orderData.orderId}"
                  
                  if (exchange.in.headers['orderShipped'] == true) {
                    println "COMPENSATION-SHIPPING: Cancelled shipment for order ${orderData.orderId}"
                    orderData.steps.add('COMPENSATION_SHIPPING_SUCCESS')
                  } else {
                    println "COMPENSATION-SHIPPING: No shipment to cancel for order ${orderData.orderId}"
                    orderData.steps.add('COMPENSATION_SHIPPING_SKIPPED')
                  }
                  
                  // Mark compensation as completed
                  orderData.status = 'COMPENSATED'
                  orderData.compensationEndTime = new Date().toString()
                  sagaTracker.put(lraId, orderData)
                } else {
                  println "COMPENSATION-SHIPPING: No order data found"
                }
