- route:
    id: inbound-http-adapter
    description: Primary Adapter - HTTP REST API (Driving Adapter)
    from:
      id: Http server
      uri: jetty:http://0.0.0.0:8080/api/customers
      parameters:
        httpMethodRestrict: GET,POST,PUT,DELETE
      steps:
        - setHeader:
            expression:
              simple: ${header.CamelHttpMethod}
            name: httpMethod
        - setHeader:
            expression:
              simple: ${date:now:yyyyMMdd-HHmmss-SSS}
            name: correlationId
        - script:
            id: script
            groovy: >
              def method = request.headers['httpMethod']

              def body = request.body

              def correlationId = request.headers['correlationId']


              log.info("ðŸ”µ INBOUND REQUEST - Method: ${method}, CorrelationId:
              ${correlationId}")

              log.info("Request Body: ${body}")


              // Add request timestamp for metrics

              request.headers['requestTimestamp'] = System.currentTimeMillis()
        - to:
            id: customer app service
            uri: direct:customer-application-service
            parameters: {}
        - script:
            groovy: >
              def response = request.body

              def correlationId = request.headers['correlationId']


              log.info("ðŸ”µ OUTBOUND RESPONSE - CorrelationId: ${correlationId}")

              log.info("Response: ${response}")


              // Calculate processing time

              def startTime = request.headers['requestTimestamp'] as Long

              def processingTime = System.currentTimeMillis() - startTime

              log.info("Processing time: ${processingTime}ms")


              // Set response body and headers properly

              exchange.message.body = response

              exchange.message.setHeader('Content-Type', 'application/json')

              exchange.message.setHeader('X-Correlation-Id', correlationId)

              exchange.message.setHeader('X-Processing-Time',
              processingTime.toString())
        - marshal:
            json:
              library: Jackson
- route:
    id: customer-application-service
    description: Application Service - Business Use Cases Orchestration
    from:
      id: customer-app-service
      uri: direct:customer-application-service
      steps:
        - choice:
            otherwise:
              steps:
                - script:
                    groovy: |
                      request.body = [
                        error: "Method not supported",
                        method: request.headers['httpMethod'],
                        timestamp: new Date().toString()
                      ]
            when:
              - steps:
                  - to: direct:get-customer-use-case
                simple: ${header.httpMethod} == 'GET'
              - steps:
                  - to: direct:create-customer-use-case
                simple: ${header.httpMethod} == 'POST'
              - steps:
                  - to: direct:update-customer-use-case
                simple: ${header.httpMethod} == 'PUT'
              - steps:
                  - to: direct:delete-customer-use-case
                simple: ${header.httpMethod} == 'DELETE'
- route:
    id: get-customer-use-case
    description: Domain Use Case - Get Customer
    from:
      uri: direct:get-customer-use-case
      steps:
        - script:
            groovy: |
              // Domain Logic: Parse customer ID from query parameters
              def query = request.headers['CamelHttpQuery']
              def customerId = null

              if (query?.contains('id=')) {
                customerId = query.split('id=')[1].split('&')[0]
              }

              log.info("DOMAIN - Get Customer Use Case - ID: ${customerId}")

              // Business Rule: Validate customer ID
              if (!customerId || customerId.isEmpty()) {
                request.body = [
                  error: "Customer ID is required",
                  timestamp: new Date().toString()
                ]
                request.headers['businessError'] = true
              } else {
                request.headers['customerId'] = customerId
                request.headers['operation'] = 'GET'
              }
        - choice:
            when:
              - steps:
                  - to: direct:customer-repository-port
                simple: ${header.businessError} != 'true'
- route:
    id: create-customer-use-case
    description: Domain Use Case - Create Customer
    from:
      uri: direct:create-customer-use-case
      steps:
        - unmarshal:
            json:
              library: Jackson
        - script:
            groovy: >
              log.info("DOMAIN - Create Customer Use Case :${exchange.in.body}")


              def customerData = exchange.in.body;


              // Business Rules Validation

              def errors = []


              if (!customerData?.name ||
              customerData.name.toString().trim().isEmpty()) {
                errors.add("Customer name is required")
              }


              if (!customerData?.email ||
              !customerData.email.toString().contains('@')) {
                errors.add("Valid email is required")
              }


              // Business Rule: Name must be at least 2 characters

              if (customerData?.name && customerData.name.toString().length() <
              2) {
                errors.add("Customer name must be at least 2 characters")
              }


              if (errors.size() > 0) {
                request.body = [
                  error: "Validation failed",
                  details: errors,
                  timestamp: new Date().toString()
                ]
                request.headers['businessError'] = true
              } else {
                // Generate domain entity
                def customer = [
                  id: UUID.randomUUID().toString(),
                  name: customerData.name,
                  email: customerData.email,
                  createdAt: new Date().toString(),
                  status: 'ACTIVE'
                ]
                
                request.body = customer
                request.headers['operation'] = 'CREATE'
                log.info("Created customer entity: ${customer}")
              }
        - choice:
            when:
              - steps:
                  - to: direct:customer-repository-port
                simple: ${header.businessError} != 'true'
- route:
    id: update-customer-use-case
    description: Domain Use Case - Update Customer
    from:
      uri: direct:update-customer-use-case
      steps:
        - unmarshal:
            json:
              library: Jackson
        - script:
            groovy: |
              log.info("DOMAIN - Update Customer Use Case")

              def customerData =  exchange.in.body;
              def query = request.headers['CamelHttpQuery']
              def customerId = null

              if (query?.contains('id=')) {
                customerId = query.split('id=')[1].split('&')[0]
              }

              // Business validation
              if (!customerId) {
                request.body = [error: "Customer ID is required for update"]
                request.headers['businessError'] = true
              } else {
                // Update timestamp (business rule)
                customerData.id = customerId
                customerData.updatedAt = new Date().toString()
                
                request.body = customerData
                request.headers['customerId'] = customerId
                request.headers['operation'] = 'UPDATE'
              }
        - choice:
            when:
              - steps:
                  - to: direct:customer-repository-port
                simple: ${header.businessError} != 'true'
- route:
    id: delete-customer-use-case
    description: Domain Use Case - Delete Customer
    from:
      uri: direct:delete-customer-use-case
      steps:
        - script:
            groovy: |
              log.info("DOMAIN - Delete Customer Use Case")

              def query = request.headers['CamelHttpQuery']
              def customerId = null

              if (query?.contains('id=')) {
                customerId = query.split('id=')[1].split('&')[0]
              }

              if (!customerId) {
                request.body = [error: "Customer ID is required for deletion"]
                request.headers['businessError'] = true
              } else {
                request.headers['customerId'] = customerId
                request.headers['operation'] = 'DELETE'
              }
        - choice:
            when:
              - steps:
                  - to: direct:customer-repository-port
                simple: ${header.businessError} != 'true'
- route:
    id: customer-repository-port
    description: Port - Customer Repository Abstraction
    from:
      uri: direct:customer-repository-port
      steps:
        - script:
            groovy: >
              def repositoryType =
              exchange.context.resolvePropertyPlaceholders('{{customer.repository.type:memory}}')

              def operation = request.headers['operation']


              log.info("PORT - Repository abstraction - Type: ${repositoryType},
              Operation: ${operation}")


              // Route to appropriate adapter based on configuration

              request.headers['adapterEndpoint'] =
              "direct:customer-${repositoryType}-adapter"
        - recipientList:
            expression:
              simple: ${header.adapterEndpoint}
- route:
    id: customer-memory-adapter
    description: Secondary Adapter - In-Memory Repository
    from:
      uri: direct:customer-memory-adapter
      steps:
        - script:
            groovy: >
              // Simulate in-memory storage using exchange properties

              def operation = request.headers['operation']

              def customerId = request.headers['customerId']


              log.info("ðŸ’¾ MEMORY ADAPTER - Operation: ${operation}")


              // Get or create memory store

              def memoryStore =
              exchange.context.registry.lookupByName('customerMemoryStore')

              if (!memoryStore) {
                memoryStore = [:]
                exchange.context.registry.bind('customerMemoryStore', memoryStore)
              }


              switch(operation) {
                case 'GET':
                  def customer = memoryStore[customerId]
                  if (customer) {
                    request.body = customer
                  } else {
                    request.body = [error: "Customer not found", id: customerId]
                  }
                  break
                  
                case 'CREATE':
                  def customer = request.body
                  memoryStore[customer.id] = customer
                  request.body = [success: true, customer: customer]
                  break
                  
                case 'UPDATE':
                  def customer = request.body
                  if (memoryStore[customerId]) {
                    memoryStore[customerId] = customer
                    request.body = [success: true, customer: customer]
                  } else {
                    request.body = [error: "Customer not found for update", id: customerId]
                  }
                  break
                  
                case 'DELETE':
                  if (memoryStore[customerId]) {
                    def deleted = memoryStore.remove(customerId)
                    request.body = [success: true, deleted: deleted]
                  } else {
                    request.body = [error: "Customer not found for deletion", id: customerId]
                  }
                  break
              }


              log.info("Memory store size: ${memoryStore.size()}")
- route:
    id: customer-file-adapter
    description: Secondary Adapter - File-based Repository
    from:
      uri: direct:customer-file-adapter
      steps:
        - script:
            groovy: >
              def operation = request.headers['operation']

              def customerId = request.headers['customerId']

              def fileName = "customers.txt"


              log.info("FILE ADAPTER - Operation: ${operation}")


              switch(operation) {
                case 'GET':
                  try {
                    def file = new File(fileName)
                    if (file.exists()) {
                      def lines = file.readLines()
                      def found = lines.find { it.startsWith("${customerId}:") }
                      if (found) {
                        def parts = found.split(":", 2)
                        request.body = [
                          id: customerId,
                          data: parts[1],
                          source: "file"
                        ]
                      } else {
                        request.body = [error: "Customer not found", id: customerId]
                      }
                    } else {
                      request.body = [error: "Customer not found", id: customerId]
                    }
                  } catch (Exception e) {
                    request.body = [error: "File read error: ${e.message}"]
                  }
                  break
                  
                case 'CREATE':
                  try {
                    def customer = request.body
                    def file = new File(fileName)
                    def line = "${customer.id}:${customer.name}:${customer.email}:${customer.createdAt}"
                    file.append(line + "\n")
                    request.body = [success: true, customer: customer]
                  } catch (Exception e) {
                    request.body = [error: "File write error: ${e.message}"]
                  }
                  break
                  
                case 'UPDATE':
                  try {
                    def customer = request.body
                    def file = new File(fileName)
                    if (file.exists()) {
                      def lines = file.readLines()
                      def updated = false
                      def newLines = lines.collect { line ->
                        if (line.startsWith("${customerId}:")) {
                          updated = true
                          return "${customer.id}:${customer.name}:${customer.email}:${customer.updatedAt}"
                        }
                        return line
                      }
                      
                      if (updated) {
                        file.text = newLines.join("\n") + "\n"
                        request.body = [success: true, customer: customer]
                      } else {
                        request.body = [error: "Customer not found for update", id: customerId]
                      }
                    } else {
                      request.body = [error: "Customer not found for update", id: customerId]
                    }
                  } catch (Exception e) {
                    request.body = [error: "File update error: ${e.message}"]
                  }
                  break
                  
                case 'DELETE':
                  try {
                    def file = new File(fileName)
                    if (file.exists()) {
                      def lines = file.readLines()
                      def originalSize = lines.size()
                      def newLines = lines.findAll { !it.startsWith("${customerId}:") }
                      
                      if (newLines.size() < originalSize) {
                        file.text = newLines.join("\n") + (newLines.size() > 0 ? "\n" : "")
                        request.body = [success: true, deleted: [id: customerId]]
                      } else {
                        request.body = [error: "Customer not found for deletion", id: customerId]
                      }
                    } else {
                      request.body = [error: "Customer not found for deletion", id: customerId]
                    }
                  } catch (Exception e) {
                    request.body = [error: "File delete error: ${e.message}"]
                  }
                  break
              }
- route:
    id: customer-database-adapter
    description: Secondary Adapter - Database Repository (Simulated)
    from:
      uri: direct:customer-database-adapter
      steps:
        - script:
            groovy: >
              def operation = request.headers['operation']

              def customerId = request.headers['customerId']


              log.info("DATABASE ADAPTER - Operation: ${operation}")


              // Simulate database operations with realistic delays

              Thread.sleep(50) // Simulate DB latency


              switch(operation) {
                case 'GET':
                  // Simulate database query
                  def customer = [
                    id: customerId,
                    name: "John Doe (from DB)",
                    email: "john@example.com",
                    createdAt: new Date().toString(),
                    status: "ACTIVE",
                    source: "database"
                  ]
                  request.body = customer
                  break
                  
                case 'CREATE':
                  def customer = request.body
                  customer.source = "database"
                  customer.dbId = Math.abs(new Random().nextInt())
                  request.body = [success: true, customer: customer, dbId: customer.dbId]
                  break
                  
                case 'UPDATE':
                  def customer = request.body
                  customer.source = "database"
                  customer.lastModified = new Date().toString()
                  request.body = [success: true, customer: customer]
                  break
                  
                case 'DELETE':
                  request.body = [
                    success: true, 
                    deleted: [id: customerId, deletedAt: new Date().toString()],
                    message: "Customer deleted from database"
                  ]
                  break
              }
- route:
    id: notification-port
    description: Port - Notification Service Abstraction
    from:
      uri: direct:notification-port
      steps:
        - script:
            groovy: >
              def notificationType =
              exchange.context.resolvePropertyPlaceholders('{{notification.type:log}}')

              log.info("ðŸ“¢ NOTIFICATION PORT - Type: ${notificationType}")


              request.headers['notificationEndpoint'] =
              "direct:notification-${notificationType}-adapter"
        - recipientList:
            expression:
              simple: ${header.notificationEndpoint}
- route:
    id: notification-log-adapter
    description: Secondary Adapter - Log Notification
    from:
      uri: direct:notification-log-adapter
      steps:
        - script:
            groovy: |
              def event = request.body
              log.info("ðŸ“§ LOG NOTIFICATION: ${event}")
- route:
    id: notification-email-adapter
    description: Secondary Adapter - Email Notification (Simulated)
    from:
      uri: direct:notification-email-adapter
      steps:
        - script:
            groovy: >
              def event = request.body

              log.info("ðŸ“§ EMAIL NOTIFICATION (simulated): Sending email about
              ${event}")

              // In real implementation, this would integrate with email service
- route:
    id: health-check
    description: Health Check Endpoint
    from:
      uri: jetty:http://0.0.0.0:8080/health
      steps:
        - script:
            groovy: >
              def repositoryType =
              exchange.context.resolvePropertyPlaceholders('{{customer.repository.type:memory}}')

              def health = [
                status: "UP",
                timestamp: new Date().toString(),
                configuration: [
                  repositoryAdapter: repositoryType,
                  architecture: "hexagonal"
                ],
                components: [
                  "http-adapter": "UP",
                  "application-service": "UP",
                  "repository-port": "UP",
                  "${repositoryType}-adapter": "UP"
                ]
              ]


              exchange.message.body = health
        - marshal:
            json:
              library: Jackson
        - setHeader:
            constant: application/json
            name: Content-Type
