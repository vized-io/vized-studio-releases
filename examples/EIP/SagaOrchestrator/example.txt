- route:
    id: simple-saga-route
    from:
      uri: timer:start
      parameters:
        period: 10000
        repeatCount: 3
      steps:
        - setHeader:
            id: set-transaction-id
            name: TransactionId
            expression:
              simple: "TXN-${random(1000,9999)}"
        - log:
            id: log-start
            message: "Starting SAGA for transaction: ${header.TransactionId}"
        - saga:
            id: main-saga
            # compensation: "true"
            completionMode: AUTO
            steps:
              - to:
                  id: call-service-a
                  uri: direct:serviceA
              - to:
                  id: call-service-b
                  uri: direct:serviceB
        - log:
            id: log-success
            message: "SAGA completed successfully for: ${header.TransactionId}"

- route:
    id: service-a-route
    from:
      uri: direct:serviceA
      steps:
        - saga:
            id: service-a-compensation
            compensation:
              uri: direct:compensateA
        - log:
            id: log-service-a
            message: "Service A processing transaction: ${header.TransactionId}"
        - choice:
            id: service-a-choice
            when:
              - expression:
                  simple: "${random(1,10)} > 8"
                id: service-a-fail-condition
                steps:
                  - throwException:
                      id: service-a-exception
                      exceptionType: java.lang.RuntimeException
                      message: "Service A failed"
            # otherwise:
            #   id: service-a-success
            #   steps:
            #     - saga:
            #         id: service-a-compensation
            #         compensation:
            #           uri: direct:compensateA

- route:
    id: service-b-route
    from:
      uri: direct:serviceB
      steps:
        - saga:
            id: service-b-compensation
            compensation:
              uri: direct:compensateB
        - log:
            id: log-service-b
            message: "Service B processing transaction: ${header.TransactionId}"
        - choice:
            id: service-b-choice
            when:
              - expression:
                  simple: "${random(1,10)} > 7"
                id: service-b-fail-condition
                steps:
                  - throwException:
                      id: service-b-exception
                      exceptionType: java.lang.RuntimeException
                      message: "Service B failed"
            # otherwise:
            #   id: service-b-success
            #   steps:
            #     - saga:
            #         id: service-b-compensation
            #         compensation:
            #           uri: direct:compensateB

- route:
    id: compensate-a-route
    from:
      uri: direct:compensateA
      steps:
        - log:
            id: log-compensate-a
            message: "COMPENSATING Service A for transaction: ${header.TransactionId}"

- route:
    id: compensate-b-route
    from:
      uri: direct:compensateB
      steps:
        - log:
            id: log-compensate-b
            message: "COMPENSATING Service B for transaction: ${header.TransactionId}"